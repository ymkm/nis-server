{
  "name": "node-dweetio",
  "version": "0.0.10",
  "description": "A node.js client for dweet.io",
  "main": "dweet.io.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/buglabs/node-dweetio.git"
  },
  "author": {
    "name": "Jim Heising",
    "email": "jheising@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/buglabs/node-dweetio/issues"
  },
  "keywords": [
    "dweet.io",
    "IOT",
    "m2m",
    "robotics",
    "sensors",
    "arduino",
    "beaglebone"
  ],
  "homepage": "http://dweet.io",
  "dependencies": {
    "socket.io-client": "~0.9.16",
    "request": "~2.33.0"
  },
  "devDependencies": {
    "should": "~3.1.2",
    "uuid": "~1.4.1"
  },
  "readme": "# node-dweetio\n\nA node.js module for interacting with http://dweet.io — a free, easy-to-use messaging platform for the Internet of Things.\n\n### Installation\n\nvia npm:\n```bash\n$ npm install node-dweetio --save\n```\n\n### Use It\n\n```js\nvar dweetClient = require(\"node-dweetio\");\nvar dweetio = new dweetClient();\n```\n\n### Dweeting\n\nSend a dweet and let dweet.io make up a name for you. Subsequent calls to this will result in the same name being used.\n```js\ndweetio.dweet({some:\"data\"}, function(err, dweet){\n\n    console.log(dweet.thing); // The generated name\n    console.log(dweet.content); // The content of the dweet\n    console.log(dweet.created); // The create date of the dweet\n\n});\n```\n\nSend a dweet with a name you define.\n```js\ndweetio.dweet_for(\"my-thing\", {some:\"data\"}, function(err, dweet){\n\n    console.log(dweet.thing); // \"my-thing\"\n    console.log(dweet.content); // The content of the dweet\n    console.log(dweet.created); // The create date of the dweet\n\n});\n```\n\n### Getting Dweets\n\nGet the latest dweet.\n```js\ndweetio.get_latest_dweet_for(\"my-thing\", function(err, dweet){\n\n    var dweet = dweet[0]; // Dweet is always an array of 1\n\n    console.log(dweet.thing); // The generated name\n    console.log(dweet.content); // The content of the dweet\n    console.log(dweet.created); // The create date of the dweet\n\n});\n```\n\nGet all dweets (up to 500 in the last 24 hours).\n```js\ndweetio.get_all_dweets_for(\"my-thing\", function(err, dweets){\n\n    // Dweets is an array of dweets\n    for(theDweet in dweets)\n    {\n        var dweet = dweets[theDweet];\n\n        console.log(dweet.thing); // The generated name\n        console.log(dweet.content); // The content of the dweet\n        console.log(dweet.created); // The create date of the dweet\n    }\n\n});\n```\n\n### Notifications\n\nListen for all dweets from a thing.\n```js\ndweetio.listen_for(\"my-thing\", function(dweet){\n\n    // This will be called anytime there is a new dweet for my-thing\n\n});\n```\n\nStop listening for dweets from a thing.\n```js\ndweetio.stop_listening_for(\"my-thing\");\n```\n\nStop listening for dweets from everything.\n```js\ndweetio.stop_listening();\n```\n\n### Locking & Security\n\nBy default, all things are publicly accessible if you know the name of the thing. You can also lock things so that they are only accessible to users with valid security credentials. To purchase locks, visit https://dweet.io/locks. The locks will be emailed to you.\n\nTo use purchased locks:\n\n```js\n// To lock a thing\ndweetio.lock(\"my-thing\", \"my-lock\", \"my-key\", function(err){\n\n    // If there was a problem, err will be returned, otherwise the lock was successful.\n\n});\n\n// To unlock a thing\ndweetio.unlock(\"my-thing\", \"my-key\", function(err){\n\n    // If there was a problem, err will be returned, otherwise the lock was successful.\n\n});\n\n// To remove a lock no matter what it's attached to\ndweetio.remove_lock(\"my-lock\", \"my-key\", function(err){\n\n    // If there was a problem, err will be returned, otherwise the lock was successful.\n\n});\n```\n\nOnce a thing has been locked, you must pass the key to the lock with any call you make to other functions in this client library. The key will be passed as a parameter before the callback function. For example:\n\n```js\ndweetio.dweet_for(\"my-locked-thing\", {some:\"data\"}, \"my-key\", callback);\n\ndweetio.get_latest_dweet_for(\"my-locked-thing\", \"my-key\", callback);\n\ndweetio.get_all_dweets_for(\"my-locked-thing\", \"my-key\", callback);\n\ndweetio.listen_for(\"my-locked-thing\", \"my-key\", callback);\n```\n\nFailure to pass a key or passing an incorrect key for a locked thing will result in an error being returned in the callback.\n\n### Copyright & License\n\nCopyright © 2013 Jim Heising (https://github.com/jheising)\n<br/>\nCopyright © 2013 Bug Labs, Inc. (http://buglabs.net)\n<br/>\nLicensed under the **MIT** license.\n\n",
  "readmeFilename": "README.md",
  "_id": "node-dweetio@0.0.10",
  "dist": {
    "shasum": "ba3aa0e01564d771bb51029a3f9e0809ba13330b"
  },
  "_from": "node-dweetio@",
  "_resolved": "https://registry.npmjs.org/node-dweetio/-/node-dweetio-0.0.10.tgz"
}
